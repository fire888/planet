(function () {
  'use strict';

  var continentsShader = {
    uniforms: {
      'red': { value: 0.0 },
      'green': { value: 0.021 },
      'blue': { value: 0.04 },

      'tDiffuse': { value: null },
      'light': { value: 0.0 }
    },
    vertexShader: ['varying vec2 vUv;', 'void main() {', 'vUv = uv;', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\n'),
    fragmentShader: ['#ifdef GL_ES', 'precision mediump float;', '#endif', 'uniform float red;', 'uniform float green;', 'uniform float blue;', 'uniform sampler2D tDiffuse;', 'uniform float light;', 'varying vec2 vUv;', 'float point (in vec2 uv, in vec2 center, in float radius) {', 'float len = length(center - uv);', 'return float(1. - smoothstep(radius, radius + .6, len));', '}', 'void main() {', 'vec2 uv = vUv;', "vec4 diff = texture2D(tDiffuse, uv);",

    //points
    'vec2 tileuv = vec2(uv.x, uv.y*0.8) * 180.;', 'float radius = .03;', 'vec2 center = floor( tileuv ) + vec2( 0.5, 0.5 );', 'float point = point( tileuv, center, radius );', "vec4 points = vec4( red + light, green + light, blue + light,  (1.01 - diff.y) * point );",
    //contour
    "vec4 contur = vec4( red + light, green + light, blue + light,  diff.x );",
    //continents
    "vec4 continents = vec4( red, green, blue, (1.5 - diff.y) * (1.0 - points.z) * 0.01 );", "gl_FragColor = contur + continents + points;", '}'].join("\n")
  };

  var glowEarthShader = {
    uniforms: {
      'viewVector': { value: new THREE.Vector3(-800, -200, 8200) },
      'light': { value: 0.3 },
      'glowColor': { value: new THREE.Vector3(0.0, 0.24, 0.47) },
      'border': { value: 3.3 }
    },
    vertexShader: ['uniform vec3 viewVector;', 'uniform float light;', 'uniform float border;', 'varying float intensity;', 'void main() {', 'vec3 vNormal = normalize( normalMatrix * normal );', 'vec3 vNormel = normalize( normalMatrix * viewVector );', 'intensity = pow( abs(light) - dot(vNormal, vNormel), border );', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\n'),
    fragmentShader: ['uniform vec3 glowColor;', 'uniform float light;', 'varying float intensity;', 'void main() {', 'vec3 glow = ( glowColor + light ) * intensity;', 'gl_FragColor = vec4( glow, 1.0 );', '}'].join("\n")
  };

  var diodShader = {
    uniforms: {
      'color': { value: new THREE.Vector3(1.5, 1.5, 1.9) },
      'light': { value: 1.0 }
    },
    vertexShader: ['uniform float light;', 'void main() {', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\n'),
    fragmentShader: ['uniform float light;', 'uniform vec3 color;', 'void main() {', 'gl_FragColor = vec4( color * light, 1.0 );', '}'].join("\n")
  };

  /*******************************************************************/

  var onResize = void 0;

  var getParentContainerSize = function getParentContainerSize() {
    var parent = document.getElementById('app-webgl');
    var w = parent.clientWidth || parent.offsetWidth;
    if (w > window.innerWidth) w = window.innerWidth;
    return w;
  };

  var setActionsWindowResize = function setActionsWindowResize(f) {
    onResize = f;
    window.addEventListener('resize', function () {
      onResize(getParentContainerSize());
    }, false);
  };

  /*******************************************************************/

  var actionsMouseWheel = void 0;

  var setActionsMouseWheel = function setActionsMouseWheel(f) {
    actionsMouseWheel = f;
    document.addEventListener('wheel', onMouseWheel, false);
    document.addEventListener('scroll', onMouseWheel, false);
    document.addEventListener('touchstart', onMouseWheel, false);
  };

  var onMouseWheel = function onMouseWheel() {
    actionsMouseWheel();
    removeListenerMouseWheel();
    setTimeout(function () {
      var slogan = document.getElementById('slogan');
      slogan.className = 'show';
    }, 500);
  };

  var removeListenerMouseWheel = function removeListenerMouseWheel() {
    document.removeEventListener('wheel', onMouseWheel, false);
    document.removeEventListener('scroll', onMouseWheel, false);
    document.removeEventListener('touchstart', onMouseWheel, false);
  };

  /*******************************************************************/

  var showCanvas = function showCanvas() {
    var canvas = document.getElementById('webgl');
    canvas.className = 'show';
  };

  var hidePreloader = function hidePreloader() {
    var preloader = document.getElementById('preloader');
    preloader.className = 'hide';
    setTimeout(function () {
      preloader.className = 'hidden';
    }, 1000);
  };

  var canvases = {
    'dr01': {
      canvas: null,
      ctx: null,
      sprites: [],
      imgs: {
        'back': {
          src: 'assets/ill_01_back.png',
          data: null
        },
        'wire': {
          src: 'assets/ill_02_wire.png',
          data: null
        }
      }
    },
    'dr02': {
      canvas: null,
      ctx: null,
      sprites: [],
      imgs: {
        'back': {
          src: 'assets/ill_02_back.png',
          data: null
        },
        'wire': {
          src: 'assets/ill_02_wire.png',
          data: null
        },
        'wire_blur': {
          src: 'assets/ill_02_wire_blur.png',
          data: null
        }
      }
    },
    'dr03': {
      canvas: null,
      ctx: null,
      sprites: [],
      imgs: {
        'back': {
          src: 'assets/ill_03_back.png',
          data: null
        },
        'wire': {
          src: 'assets/ill_02_wire.png',
          data: null
        },
        'wire_blur': {
          src: 'assets/ill_02_wire_blur.png',
          data: null
        }
      }
    },
    'dr04': {
      canvas: null,
      ctx: null,
      sprites: [],
      imgs: {
        'back': {
          src: 'assets/ill_04_back.png',
          data: null
        },
        'wire': {
          src: 'assets/ill_02_wire.png',
          data: null
        }
      }
    },
    'dr05': {
      canvas: null,
      ctx: null,
      sprites: [],
      imgs: {
        'back': {
          src: 'assets/ill_05_back.png',
          data: null
        },
        'wire': {
          src: 'assets/ill_02_wire.png',
          data: null
        }
      }
    }
  };

  var sprites_Data = {
    'LeftNORM': {
      start: {
        xMin: 0,
        xMax: 50,
        yMin: 50,
        yMax: 200
      },
      finish: {
        xMin: 600,
        xMax: 400
      },
      spd: {
        xMin: 1.5,
        xMax: 2.5,
        yMin: 0,
        yMax: 0
      },
      color: 'rgba(255, 255, 0, 1.0)'
    }

    /*******************************************************************/

  };var actionsLoad = [],
      loaded = 0;

  function ILLUSTRATIONS_InitStart() {
    loadAssetsImgs(function () {
      initCanvases();
      startAnimationCanvases();
    });
  }

  var interval;

  function startAnimationCanvases() {
    interval = setInterval(drawFrameCanvases, 30);
  }

  function drawFrameCanvases() {
    for (var key in canvases) {
      updateCanvas(canvases[key]);
    }
  }

  /*******************************************************************/

  function loadAssetsImgs(onload) {
    var _loop = function _loop(key) {
      var _loop2 = function _loop2(keyNameImg) {
        actionsLoad.push(function () {
          canvases[key].imgs[keyNameImg].data = new Image();
          canvases[key].imgs[keyNameImg].data.src = canvases[key].imgs[keyNameImg].src;
          canvases[key].imgs[keyNameImg].data.onload = function () {
            loaded++;
            actionsLoad[loaded]();
          };
        });
      };

      for (var keyNameImg in canvases[key].imgs) {
        _loop2(keyNameImg);
      }
    };

    for (var key in canvases) {
      _loop(key);
    }
    actionsLoad.push(function () {
      onload();
    });
    actionsLoad[0]();
  }

  function initCanvases() {
    for (var key in canvases) {
      canvases[key].canvas = document.getElementById(key);
      canvases[key].ctx = canvases[key].canvas.getContext('2d');
      initSprites(key);
    }
  }

  function updateCanvas(item) {
    item.ctx.clearRect(0, 0, item.canvas.width, item.canvas.height);
    item.ctx.globalCompositeOperation = 'source-over';
    item.ctx.drawImage(item.imgs['back'].data, 0, 0, item.canvas.width, item.canvas.height);
    updateSprites(item);
    if (item.imgs['wire']) {
      item.ctx.drawImage(item.imgs['wire'].data, 100, 100);
    }
    item.ctx.globalCompositeOperation = 'destination-in';
    item.ctx.drawImage(item.imgs['back'].data, 0, 0, item.canvas.width, item.canvas.height);
  }

  /******************************************************************/

  function initSprites(v) {
    if (v == 'dr01') {
      canvases[v].sprites.push(createDataSprites('LeftNORM', 200));
    }
    if (v == 'dr02') {
      canvases[v].sprites.push(createDataSprites('LeftNORM', 200));
    }
    if (v == 'dr03') {
      canvases[v].sprites.push(createDataSprites('LeftNORM', 200));
    }
    if (v == 'dr04') {
      canvases[v].sprites.push(createDataSprites('LeftNORM', 200));
    }
    if (v == 'dr05') {
      canvases[v].sprites.push(createDataSprites('LeftNORM', 200));
    }
  }

  function createDataSprites(name, count) {
    var arr = [];
    for (var i = 0; i < count; i++) {
      var s = {};
      setStartParams(s, name);
      arr.push(s);
    }
    return arr;
  }

  function setStartParams(s, name) {
    var _pro = sprites_Data[name];
    s.type = name;
    s.x = Math.random() * _pro.start.xMax + _pro.start.xMin;
    s.y = Math.random() * _pro.start.yMax + _pro.start.yMin;
    s.spdX = Math.random() * _pro.spd.xMax + _pro.spd.xMin;
    s.spdY = Math.random() * _pro.spd.yMax + _pro.spd.yMin;
    s.color = _pro.color;
  }

  function updateSprites(item) {
    for (var i = 0; i < item.sprites.length; i++) {
      for (var ii = 0; ii < item.sprites[i].length; ii++) {
        drawSprite(item, item.sprites[i][ii]);
      }
    }
  }

  function drawSprite(dataCan, sprite) {
    if (sprite.x > sprites_Data[sprite.type].finish.xMin) {
      setStartParams(sprite, sprite.type);
    }
    sprite.x += sprite.spdX;
    sprite.y += sprite.spdY;
    dataCan.ctx.fillStyle = sprite.color;
    dataCan.ctx.fillRect(sprite.x, sprite.y, 20, 20);
  }

  window.onload = function () {
    loadAssets(function () {
      var widthCanvas = getParentContainerSize();
      initScene(widthCanvas);
      resizeCanvas(widthCanvas);
      setActionsWindowResize(resizeCanvas);
      createCubes();
      createEarth();
      createConnectors();
      drawFrame();
      showCanvas();
      hidePreloader();
      setActionsMouseWheel(onUserActionMouseWheel);
      rendererBottom.render(scene, cameraBottom);
      ILLUSTRATIONS_InitStart();
    });
  };

  /*******************************************************************/
  /*******************************************************************/

  var app_Params = {
    earthRed: 0.0,
    earthGreen: 0.04,
    earthBlue: 0.08,
    glowRed: 0.0,
    glowGreen: 0.19,
    glowBlue: 0.22,
    glowLight: 0.0,
    glowBorder: 2.9,
    wireColor: "#ffae23",
    wireDiodRed: 0.9,
    wireDiodGreen: 0.9,
    wireDiodBlue: 0.9,
    earthLeftMax: -2.0,
    earthRightMax: 0.45,
    earthAxell: 0.00085,
    earthMaxSpd: 0.017,
    earthSpdFree: 0.015

    /*******************************************************************/
    /*******************************************************************/

  };var APP_STATE = 'DARK'; // || 'FLASH' || 'LIGHT'

  var onUserActionMouseWheel = function onUserActionMouseWheel() {
    return APP_STATE = 'FLASH';
  };

  var animateAllObjects = function animateAllObjects() {
    if (APP_STATE == 'FLASH') {
      if (checkEarthStateLight() && checkConnectorsStateLight()) APP_STATE = 'LIGHT';
    }
    animateEarth(APP_STATE);
    animateConnectors(APP_STATE);
    animateCubes(APP_STATE);
  };

  /*******************************************************************/
  /*******************************************************************/

  var textureLoader = void 0,
      objectLoader = void 0;

  var ASSETS = {
    textures: {
      waterNormals: null,
      continents: null
    },
    geoms: {
      corpus: null,
      diod: null
    }
  };

  var loadAssets = function loadAssets(onLoad) {
    textureLoader = new THREE.TextureLoader();
    objectLoader = new THREE.OBJLoader();
    new Promise(function (resolve) {
      ASSETS.textures.continents = textureLoader.load('assets/contour.jpg', function () {
        resolve();
      });
    }).then(function () {
      return new Promise(function (resolve) {
        objectLoader.load('assets/connector.obj', function (obj) {
          obj.traverse(function (child) {
            if (child instanceof THREE.Mesh != true) return;
            if (child.name == 'diod') ASSETS.geoms.diod = child.geometry;
            if (child.name == 'iron') ASSETS.geoms.corpus = child.geometry;
            if (ASSETS.geoms.diod && ASSETS.geoms.corpus) resolve();
          });
        });
      });
    }).then(function () {
      textureLoader = null;
      objectLoader = null;
      onLoad();
    });
  };

  /*******************************************************************/
  /*******************************************************************/

  var scene = void 0,
      camera = void 0,
      renderer = void 0,
      rendererBottom = void 0,
      cameraBottom = void 0;

  var initScene = function initScene(width) {
    renderer = new THREE.WebGLRenderer({ canvas: document.getElementById('webgl') });
    rendererBottom = new THREE.WebGLRenderer({ canvas: document.getElementById('webgl_bottom') });

    camera = new THREE.PerspectiveCamera(20, width / (width * 0.7), 3.5, 15000);
    camera.position.set(-800, -200, 8200);

    cameraBottom = new THREE.PerspectiveCamera(20, width / (width * 0.3), 3.5, 15000);
    cameraBottom.position.set(0, -2000, -4000);
    cameraBottom.rotation.x = 1.1;

    var lightPoint = new THREE.PointLight(0xf114b5d, 0.2);
    lightPoint.position.set(1000, 3000, 600);
    var lightAmb = new THREE.AmbientLight(0x8a0873, 0.2);
    scene = new THREE.Scene();
    scene.add(lightPoint, lightAmb);
  };

  var resizeCanvas = function resizeCanvas(width) {
    renderer.setSize(width, width * 0.7);
    camera.aspect = width / (width * 0.7);
    camera.updateProjectionMatrix();

    rendererBottom.setSize(width, width * 0.4);
    cameraBottom.aspect = width / (width * 0.4);
    cameraBottom.updateProjectionMatrix();
  };

  var drawFrame = function drawFrame() {
    animateAllObjects();
    renderer.render(scene, camera);
    if (APP_STATE == 'LIGHT') {
      rendererBottom.render(scene, cameraBottom);
    }
    requestAnimationFrame(drawFrame);
  };

  /*******************************************************************/
  /*******************************************************************/

  var earth = void 0,
      continentsMesh = void 0,
      glowMesh = void 0;

  var createEarth = function createEarth() {
    glowMesh = createEarthGlow();
    continentsMesh = createContinents();
    earth = new THREE.Group();
    earth.rotation.z = -0.3;
    earth.rotation.x = 0.5;
    continentsMesh.rotation.y = 0.7;
    scene.add(earth.add(continentsMesh), glowMesh);
  };

  var createContinents = function createContinents() {
    var mesh = new THREE.Mesh(new THREE.SphereGeometry(608, 40, 40), new THREE.ShaderMaterial(continentsShader));
    mesh.material.transparent = true;
    mesh.material.side = THREE.DoubleSide;
    mesh.material.depthWrite = false;
    mesh.material.needsUpdate = true;
    mesh.material.uniforms.tDiffuse.value = ASSETS.textures.continents;
    return mesh;
  };

  var createEarthGlow = function createEarthGlow() {
    var mesh = new THREE.Mesh(new THREE.SphereGeometry(780, 40, 40), new THREE.ShaderMaterial(glowEarthShader));
    mesh.material.transparent = true;
    mesh.material.blending = THREE.AdditiveBlending, mesh.material.side = THREE.DoubleSide;
    mesh.material.depthWrite = false;
    mesh.material.needsUpdate = true;
    return mesh;
  };

  /*******************************************************************/

  var earthSpd = 0.002,
      addSpd = 0.0003,
      earthDir = 'left'; // || 'right'

  var animateEarth = function animateEarth(STATE) {
    if (!earth) return;
    if (STATE == 'DARK') earthUpdateParamsDark();
    if (STATE == 'FLASH') earthUpdateParamsFlash();
    continentsMesh.rotation.y += earthSpd;
  };

  var earthUpdateParamsDark = function earthUpdateParamsDark() {
    if (continentsMesh.rotation.y > app_Params.earthLeftMax && earthDir == 'left') earthDir = 'right';
    if (continentsMesh.rotation.y < app_Params.earthRightMax && earthDir == 'right') earthDir = 'left';
    if (earthDir == 'left') if (Math.abs(earthSpd + app_Params.earthAxell) < app_Params.earthMaxSpd) earthSpd += app_Params.earthAxell;
    if (earthDir == 'right') if (Math.abs(earthSpd - app_Params.earthAxell) < app_Params.earthMaxSpd) earthSpd -= app_Params.earthAxell;
  };

  var earthUpdateParamsFlash = function earthUpdateParamsFlash() {
    earthSpd < app_Params.earthSpdFree ? earthSpd += addSpd : earthSpd = app_Params.earthSpdFree;
    if (continentsMesh.material.uniforms.light.value < 1.35) continentsMesh.material.uniforms.light.value += 0.012;
    if (glowMesh.material.uniforms.light.value < 0.1) glowMesh.material.uniforms.light.value += 0.0034;
  };

  var checkEarthStateLight = function checkEarthStateLight() {
    if (earthSpd == app_Params.earthSpdFree) return true;
    return false;
  };

  /*******************************************************************/
  /*******************************************************************/

  var arrConnectors = [],
      connectorsData = [{ //america
    dirY: 6.08,
    dirZ: 0.8
  }, { //soushAm
    dirY: 0.2,
    dirZ: 1.8
  }, { //russia
    dirY: 3.24,
    dirZ: 0.8
  }, { //europe
    dirY: 1.5,
    dirZ: 0.8
  }, { //africa
    dirY: 1.9,
    dirZ: 1.8
  }, { //australia
    dirY: 3.7,
    dirZ: 2.0
  }],
      connectorsCenter = void 0,
      materialIron = void 0,
      materialDiod = void 0;

  var createConnectors = function createConnectors() {
    materialIron = createMaterialIron();
    materialDiod = createMaterialDiod();
    connectorsCenter = new THREE.Group();
    connectorsData.forEach(function (item) {
      var objPlug = createPlug();
      var wire = createWire();
      objPlug.plug.add(wire);
      var connector = new THREE.Group();
      connector.add(objPlug.plug);
      connector.position.set(Math.sin(item.dirZ) * Math.sin(item.dirY) * 795, Math.cos(item.dirZ) * 795, Math.sin(item.dirZ) * Math.cos(item.dirY) * 795);
      connector.lookAt(0, 0, 0);
      arrConnectors.push({ connector: connector, plug: objPlug.plug, corpus: objPlug.corpus, diod: objPlug.diod, wire: wire });
      connectorsCenter.add(connector);
    });
    continentsMesh.add(connectorsCenter);
  };

  var createMaterialIron = function createMaterialIron() {
    return new THREE.MeshPhongMaterial({
      color: 0x0c0a19,
      emissive: 0x00000,
      specular: 0xffffff,
      shininess: 100
    });
  };

  var createMaterialDiod = function createMaterialDiod() {
    return new THREE.ShaderMaterial(diodShader);
  };

  var createPlug = function createPlug() {
    var corpus = new THREE.Mesh(ASSETS.geoms.corpus, materialIron);
    var diod = new THREE.Mesh(ASSETS.geoms.diod, materialDiod);
    var plug = new THREE.Group();
    plug.add(diod, corpus);
    return { plug: plug, corpus: corpus, diod: diod };
  };

  var createWire = function createWire() {
    var curveQuad = new THREE.QuadraticBezierCurve3(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, -1000), new THREE.Vector3(0, 0, -3500));
    var wireGeom = new THREE.TubeBufferGeometry(curveQuad, 10, 25, 8, false);
    return new THREE.Mesh(wireGeom, materialIron);
  };

  /*******************************************************************/

  var removeConnectorsFromScene = function removeConnectorsFromScene() {
    if (arrConnectors.length == 0) return;
    for (var i = 0; i < arrConnectors.length; i++) {
      arrConnectors[i].plug.remove(arrConnectors[i].corpus);
      arrConnectors[i].plug.remove(arrConnectors[i].diod);
      connectorsCenter.remove(arrConnectors[i].plug);
      connectorsCenter.remove(arrConnectors[i].wire);
      var md = arrConnectors[i];
      arrConnectors.splice(i, 1);
      i--;
      md = null;
    }
    scene.remove(connectorsCenter);
    arrConnectors = [];
  };

  /*******************************************************************/

  var spdConnectors = 0.005,
      oldSTATE = 'DARK';

  var animateConnectors = function animateConnectors(STATE) {
    if (arrConnectors.length == 0) return;
    if (STATE == 'DARK') animationConnectorsDark();
    if (STATE == 'FLASH') {
      if (oldSTATE == 'DARK') {
        getConnectorsFromEarthAndPutInScene();
        oldSTATE = 'FLASH';
      }
      animationConnectorsFlash();
    }
  };

  var animationConnectorsDark = function animationConnectorsDark() {
    arrConnectors.forEach(function (item) {
      if (!item.plug || !item.wire) return;
      item.wire.geometry.parameters.path.v2.x = 5000 * Math.sin(continentsMesh.rotation.y - 0.4);
      item.wire.geometry.dispose();
      item.wire.geometry = new THREE.TubeBufferGeometry(item.wire.geometry.parameters.path, 30, 25, 8, false);
      item.wire.geometry.needsUpdate = true;
    });
  };

  var getConnectorsFromEarthAndPutInScene = function getConnectorsFromEarthAndPutInScene() {
    continentsMesh.getWorldQuaternion(connectorsCenter.quaternion);
    continentsMesh.remove(connectorsCenter);
    scene.add(connectorsCenter);
  };

  var animationConnectorsFlash = function animationConnectorsFlash() {
    materialDiod.uniforms.light.value -= 0.01;
    spdConnectors += 0.6;
    arrConnectors.forEach(function (item) {
      item.plug.position.z -= spdConnectors;
    });
  };

  /*******************************************************************/

  var checkConnectorsStateLight = function checkConnectorsStateLight() {
    if (arrConnectors.length == 0) return true;
    if (!arrConnectors[0].plug) return true;
    if (arrConnectors[0].plug.position.z < -5000) {
      removeConnectorsFromScene();
      return true;
    }
    return false;
  };

  /*******************************************************************/
  /*******************************************************************/

  var arrCubes = [];

  var createCubes = function createCubes() {
    var mat = new THREE.MeshPhongMaterial({
      color: 0x1ee5ba,
      emissive: 0x00000,
      specular: 0xc0c0c0,
      shininess: 100
    });
    var geom = new THREE.CubeGeometry(600, 600, 600);
    for (var yi = 0; yi < 20; yi++) {
      for (var xi = 0; xi < 20; xi++) {
        var cube = new THREE.Mesh(geom, mat);
        scene.add(cube);
        cube.position.set(xi * 600 - 6000, yi * 600 - 3000, -6000);
        cube.rotation.x = xi / 5.0 + yi / 5.0;
        arrCubes.push(cube);
      }
    }
  };

  var animateCubes = function animateCubes(STATE) {
    arrCubes.forEach(function (item) {
      item.rotation.x += 0.01;
    });
  };

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
