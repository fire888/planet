(function () {
  'use strict';

  var continentsShader = {
    uniforms: {
      'tDiffuse': { value: null },
      'light': { value: 0.0 }
    },
    vertexShader: ['varying vec2 vUv;', 'void main() {', 'vUv = uv;', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\n'),
    fragmentShader: ['#ifdef GL_ES', 'precision mediump float;', '#endif', 'uniform sampler2D tDiffuse;', 'uniform float light;', 'varying vec2 vUv;', 'float point (in vec2 uv, in vec2 center, in float radius) {', 'float len = length(center - uv);', 'return float(1. - smoothstep(radius, radius + .6, len));', '}', 'void main() {', 'vec2 uv = vUv;', "vec4 diff = texture2D(tDiffuse, uv);",

    //points
    'vec2 tileuv = vec2(uv.x, uv.y*0.8) * 180.;', 'float radius = .03;', 'vec2 center = floor( tileuv ) + vec2( 0.5, 0.5 );', 'float point = point( tileuv, center, radius );', "vec4 points = vec4( 1.5 * light - 0.2, 1.5 * light - 0.2, 1.8 * light,  (1.01 - diff.y) * point );",
    //contour
    "vec4 contur = vec4( 1.2*light, 1.2*light, 1.8*light,  diff.x );",
    //continents
    "vec4 continents = vec4( .1, .1, .2, (1.5 - diff.y) * (1.0 - points.z) * 0.01 );", "gl_FragColor = contur + continents + points;", '}'].join("\n")
  };

  var glowEarthShader = {
    uniforms: {
      'viewVector': { value: new THREE.Vector3(-800, -200, 8200) },
      'light': { value: 0.01 },
      'glowColor': { value: new THREE.Vector3(0.5, 0.5, 0.9) }
    },
    vertexShader: ['uniform vec3 viewVector;', 'uniform float light;', 'varying float intensity;', 'void main() {', 'vec3 vNormal = normalize( normalMatrix * normal );', 'vec3 vNormel = normalize( normalMatrix * viewVector );', 'intensity = pow( abs(light) - dot(vNormal, vNormel), 2.9 );', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\n'),
    fragmentShader: ['uniform vec3 glowColor;', 'varying float intensity;', 'void main() {', 'vec3 glow = glowColor * intensity;', 'gl_FragColor = vec4( glow, 1.0 );', '}'].join("\n")
  };

  var diodShader = {
    uniforms: {
      'light': { value: 1.0 }
    },
    vertexShader: ['uniform float light;', 'void main() {', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\n'),
    fragmentShader: ['uniform float light;', 'void main() {', 'gl_FragColor = vec4( 0.8*light, 0.9*light, 1.3*light, 1.0 );', '}'].join("\n")
  };

  /*******************************************************************/

  var onResize = void 0;

  var getParentContainerSize = function getParentContainerSize() {
    var parent = document.getElementById('app-webgl');
    var w = parent.clientWidth || parent.offsetWidth;
    if (w > window.innerWidth) w = window.innerWidth;
    return w;
  };

  var setActionsWindowResize = function setActionsWindowResize(f) {
    onResize = f;
    window.addEventListener('resize', function () {
      onResize(getParentContainerSize());
    }, false);
  };

  /*******************************************************************/

  var actionsMouseWheel = void 0;

  var setActionsMouseWheel = function setActionsMouseWheel(f) {
    actionsMouseWheel = f;
    document.addEventListener('wheel', onMouseWheel, false);
    document.addEventListener('scroll', onMouseWheel, false);
    document.addEventListener('touchstart', onMouseWheel, false);
  };

  var onMouseWheel = function onMouseWheel() {
    actionsMouseWheel();
    removeListenerMouseWheel();
    setTimeout(function () {
      var slogan = document.getElementById('slogan');
      slogan.className = 'show';
    }, 500);
  };

  var removeListenerMouseWheel = function removeListenerMouseWheel() {
    document.removeEventListener('wheel', onMouseWheel, false);
    document.removeEventListener('scroll', onMouseWheel, false);
    document.removeEventListener('touchstart', onMouseWheel, false);
  };

  /*******************************************************************/

  var showCanvas = function showCanvas() {
    var canvas = document.getElementById('webgl');
    canvas.className = 'show';
  };

  var hidePreloader = function hidePreloader() {
    var preloader = document.getElementById('preloader');
    preloader.className = 'hide';
    setTimeout(function () {
      preloader.className = 'hidden';
    }, 1000);
  };

  window.onload = function () {
    loadAssets(function () {
      var widthCanvas = getParentContainerSize();
      initScene(widthCanvas);
      setActionsWindowResize(resizeCanvas);
      createEarth();
      createConnectors();
      drawFrame();
      showCanvas();
      hidePreloader();
      setActionsMouseWheel(onUserActionMouseWheel);
    });
  };

  /*******************************************************************/
  /*******************************************************************/

  var APP_STATE = 'DARK'; // || 'FLASH' || 'LIGHT'

  var onUserActionMouseWheel = function onUserActionMouseWheel() {
    return APP_STATE = 'FLASH';
  };

  var animateAllObjects = function animateAllObjects() {
    if (APP_STATE == 'FLASH') {
      if (checkEarthStateLight() && checkConnectorsStateLight()) APP_STATE = 'LIGHT';
    }
    animateEarth(APP_STATE);
    animateConnectors(APP_STATE);
  };

  /*******************************************************************/
  /*******************************************************************/

  var textureLoader = void 0,
      objectLoader = void 0;

  var ASSETS = {
    textures: {
      sceneBack: null,
      waterNormals: null,
      continents: null
    },
    geoms: {
      corpus: null,
      diod: null
    }
  };

  var loadAssets = function loadAssets(onLoad) {
    textureLoader = new THREE.TextureLoader();
    objectLoader = new THREE.OBJLoader();
    new Promise(function (resolve) {
      ASSETS.textures.sceneBack = textureLoader.load('assets/background_map.jpg', function () {
        resolve();
      });
    }).then(function () {
      return new Promise(function (resolve) {
        ASSETS.textures.continents = textureLoader.load('assets/contour.jpg', function () {
          resolve();
        });
      });
    }).then(function () {
      return new Promise(function (resolve) {
        objectLoader.load('assets/connector.obj', function (obj) {
          obj.traverse(function (child) {
            if (child instanceof THREE.Mesh != true) return;
            if (child.name == 'diod') ASSETS.geoms.diod = child.geometry;
            if (child.name == 'iron') ASSETS.geoms.corpus = child.geometry;
            if (ASSETS.geoms.diod && ASSETS.geoms.corpus) resolve();
          });
        });
      });
    }).then(function () {
      textureLoader = null;
      objectLoader = null;
      onLoad();
    });
  };

  /*******************************************************************/
  /*******************************************************************/

  var scene = void 0,
      camera = void 0,
      renderer = void 0;

  var initScene = function initScene(width) {
    renderer = new THREE.WebGLRenderer({ alpha: true, canvas: document.getElementById('webgl') });
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(width, width * 0.7);
    camera = new THREE.PerspectiveCamera(20, width / (width * 0.7), 3.5, 15000);
    camera.position.set(-800, -200, 8200);
    var lightPoint = new THREE.PointLight(0xffffff, 2.0);
    lightPoint.position.set(1000, 1000, 1000);
    var lightAmb = new THREE.AmbientLight(0xffffff, 0.2);
    scene = new THREE.Scene();
    scene.background = ASSETS.textures.sceneBack;
    scene.add(lightPoint, lightAmb);
  };

  var resizeCanvas = function resizeCanvas(width) {
    renderer.setSize(width, width * 0.7);
    camera.aspect = width / (width * 0.7);
    camera.updateProjectionMatrix();
  };

  var drawFrame = function drawFrame() {
    animateAllObjects();
    renderer.render(scene, camera);
    requestAnimationFrame(drawFrame);
  };

  /*******************************************************************/
  /*******************************************************************/

  var earth = void 0,
      continentsMesh = void 0,
      glowMesh = void 0;

  var createEarth = function createEarth() {
    glowMesh = createEarthGlow();
    continentsMesh = createContinents();
    earth = new THREE.Group();
    scene.add(earth.add(continentsMesh), glowMesh);
  };

  var createContinents = function createContinents() {
    var mesh = new THREE.Mesh(new THREE.SphereGeometry(608, 40, 40), new THREE.ShaderMaterial(continentsShader));
    mesh.rotation.z = -0.5;
    mesh.rotation.x = -0.5;
    mesh.material.transparent = true;
    mesh.material.side = THREE.DoubleSide;
    mesh.material.depthWrite = false;
    mesh.material.needsUpdate = true;
    mesh.material.uniforms.tDiffuse.value = ASSETS.textures.continents;
    return mesh;
  };

  var createEarthGlow = function createEarthGlow() {
    var mesh = new THREE.Mesh(new THREE.SphereGeometry(780, 40, 40), new THREE.ShaderMaterial(glowEarthShader));
    mesh.material.transparent = true;
    mesh.material.blending = THREE.AdditiveBlending, mesh.material.side = THREE.DoubleSide;
    mesh.material.depthWrite = false;
    mesh.material.needsUpdate = true;
    return mesh;
  };

  /*******************************************************************/

  var earthSpd = 0.002,
      earthDir = 'left'; // || 'right' 

  var animateEarth = function animateEarth(STATE) {
    if (!earth) return;
    if (STATE == 'DARK') earthUpdateParamsDark();
    if (STATE == 'FLASH') earthUpdateParamsFlash();
    earth.rotation.y += earthSpd;
  };

  var earthUpdateParamsDark = function earthUpdateParamsDark() {
    if (earthSpd > 0.008 && earthDir == 'left') earthDir = 'right';
    if (earthSpd < -0.008 && earthDir == 'right') earthDir = 'left';
    if (earthDir == 'left') earthSpd += 0.0003;
    if (earthDir == 'right') earthSpd -= 0.0003;
  };

  var earthUpdateParamsFlash = function earthUpdateParamsFlash() {
    earthSpd < 0.02 ? earthSpd += 0.0001 : earthSpd = 0.02;
    if (continentsMesh.material.uniforms.light.value < 1.35) continentsMesh.material.uniforms.light.value += 0.012;
    if (glowMesh.material.uniforms.light.value < 0.1) glowMesh.material.uniforms.light.value += 0.0034;
  };

  var checkEarthStateLight = function checkEarthStateLight() {
    if (earthSpd == 0.02) return true;
    return false;
  };

  /*******************************************************************/
  /*******************************************************************/

  var arrConnectors = [],
      connectorsCenter = void 0,
      materialIron = void 0,
      materialDiod = void 0;

  var createConnectors = function createConnectors() {
    materialIron = createMaterialIron();
    materialDiod = createMaterialDiod();
    connectorsCenter = new THREE.Group();

    var count = 7;

    for (var i = 0; i < count; i++) {
      var dirX = Math.cos(i / count * Math.PI * 2 + 0.2);
      var dirY = Math.sin(i / count * Math.PI * 2 + 0.2);

      var plug = createPlug();
      plug.position.set(770 * dirX, 770 * dirY, 0);
      plug.lookAt(0, 0, 0);

      var curveQuad = new THREE.QuadraticBezierCurve3(new THREE.Vector3(dirX * 770, dirY * 770, 0), new THREE.Vector3(dirX * 1300, dirY * 1300, 0), new THREE.Vector3(dirX * 5000, dirY * 5000, 0));
      var wireGeom = new THREE.TubeBufferGeometry(curveQuad, 16, 17, 4, false);
      wireGeom.dynamic = true;
      var wire = new THREE.Mesh(wireGeom, materialIron);

      arrConnectors.push({ plug: plug, wire: wire, dirX: dirX, dirY: dirY });
      connectorsCenter.add(plug, wire);
    }
    scene.add(connectorsCenter);
  };

  var createMaterialIron = function createMaterialIron() {
    return new THREE.MeshPhongMaterial({
      color: 0x0c0a19,
      emissive: 0x00000,
      specular: 0xc0c0c0,
      shininess: 100
    });
  };

  var createMaterialDiod = function createMaterialDiod() {
    return new THREE.ShaderMaterial(diodShader);
  };

  var createPlug = function createPlug() {
    var corpus = new THREE.Mesh(ASSETS.geoms.corpus, materialIron);
    var diod = new THREE.Mesh(ASSETS.geoms.diod, materialDiod);
    var group = new THREE.Group();
    group.add(diod, corpus);
    return group;
  };

  /*******************************************************************/

  var removeConnectorsFromScene = function removeConnectorsFromScene() {
    if (arrConnectors.length == 0) return;
    arrConnectors.forEach(function (item) {
      scene.remove(item.plug);
      scene.remove(item.wire);
    });
    scene.remove(connectorsCenter);
    arrConnectors = [];
  };

  /*******************************************************************/

  var spdConnectors = 3.5,
      countFrame = 0;

  var animateConnectors = function animateConnectors(STATE) {
    if (arrConnectors.length == 0) return;
    if (STATE == 'DARK') animationConnectorsDark();
    if (STATE == 'FLASH') animationConnectorsFlash();
  };

  var animationConnectorsDark = function animationConnectorsDark() {
    if (countFrame == 2) {
      countFrame = 0;
      return;
    } else {
      countFrame++;
    }
    arrConnectors.forEach(function (item) {
      if (!item.plug || !item.wire) return;
      if (item.plug.position.x < 0) item.wire.geometry.parameters.path.v2.z -= 10000 * earthSpd;
      if (item.plug.position.x > 0) item.wire.geometry.parameters.path.v2.z += 10000 * earthSpd;
      item.wire.geometry.dispose();
      item.wire.geometry = new THREE.TubeBufferGeometry(item.wire.geometry.parameters.path, 8, 17, 4, false);
      item.wire.geometry.needsUpdate = true;
    });
    if (!earth) return;
    connectorsCenter.rotation.y = earth.rotation.y;
  };

  var animationConnectorsFlash = function animationConnectorsFlash() {
    materialDiod.uniforms.light.value -= 0.01;
    spdConnectors += 0.3;
    arrConnectors.forEach(function (item) {
      var spdX = item.dirX * spdConnectors;
      var spdY = item.dirY * spdConnectors;
      if (item.plug) moveItem(item.plug, spdX, spdY);
      if (item.wire) moveItem(item.wire, spdX, spdY);
    });
  };

  var moveItem = function moveItem(mesh, spdX, spdY) {
    mesh.position.x += spdX;
    mesh.position.y += spdY;
  };

  /*******************************************************************/

  var checkConnectorsStateLight = function checkConnectorsStateLight() {

    if (arrConnectors.length == 0) return true;
    var item = void 0;
    if (arrConnectors[0].plug) {
      item = arrConnectors[0].plug;
    } else {
      if (arrConnectors[0].wire) {
        item = arrConnectors[0].wire;
      } else {
        return true;
      }
    }
    if (item.position.x > 3000) {
      removeConnectorsFromScene();
      return true;
    }
    return false;
  };

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
