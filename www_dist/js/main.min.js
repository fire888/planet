(function () {
  'use strict';

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var continentsShader = {
    uniforms: {
      'red': { value: 0.0 },
      'green': { value: 0.021 },
      'blue': { value: 0.04 },

      'tDiffuse': { value: null },
      'light': { value: 0.0 }
    },
    vertexShader: ['varying vec2 vUv;', 'void main() {', 'vUv = uv;', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\n'),
    fragmentShader: ['#ifdef GL_ES', 'precision mediump float;', '#endif', 'uniform float red;', 'uniform float green;', 'uniform float blue;', 'uniform sampler2D tDiffuse;', 'uniform float light;', 'varying vec2 vUv;', 'float point (in vec2 uv, in vec2 center, in float radius) {', 'float len = length(center - uv);', 'return float(1. - smoothstep(radius, radius + .4, len));', '}', 'void main() {', 'vec2 uv = vUv;', "vec4 diff = texture2D(tDiffuse, uv);",

    //points
    'vec2 tileuv = vec2(uv.x, uv.y*0.8) * 100.;', 'float radius = .03;', 'vec2 center = floor( tileuv ) + vec2( 0.5, 0.5 );', 'float point = point( tileuv, center, radius );', "vec4 points = vec4( red + light, green + light, blue + light,  (1.01 - diff.y) * point );",
    //contour
    "vec4 contur = vec4( red + light, green + light, blue + light,  diff.x );",
    //continents
    "vec4 continents = vec4( red, green, blue, (1.5 - diff.y) * (1.0 - points.z) * 0.01 );", "gl_FragColor = contur + continents + points;", '}'].join("\n")

    /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  };var setMapToGlowShader = function setMapToGlowShader(map) {
    glowShader.uniforms['tDiffuse'].value = map;
  };

  var glowShader = {
    uniforms: {
      'tDiffuse': { type: 't', value: null },
      'light': { value: 1.0 }
    },
    vertexShader: ['varying vec2 vUv;', 'void main() {', 'vUv = uv;', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\n'),
    fragmentShader: ['varying vec2 vUv;', 'uniform sampler2D tDiffuse;', 'uniform float light;', 'void main() {', 'vec2 uv = vUv;', 'vec4 txt = texture2D(tDiffuse, uv);', 'gl_FragColor = vec4( txt.xyz * vec3( 1.5, 1.9, 2.6) * light, txt.x*2.0);', '}'].join("\n")
  };

  var diodShader = {
    uniforms: {
      'color': { value: new THREE.Vector3(1, 1, 1) },
      'dark': { value: 0.0 },
      'time': { value: 1.1 }
    },
    vertexShader: ['uniform float dark;', 'varying vec2 vUv;', 'void main() {', 'vUv = uv;', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\n'),
    fragmentShader: ['uniform float dark;', 'uniform vec3 color;', 'uniform float time;', 'varying vec2 vUv;', 'void main() {', 'vec2 st = vUv.xy;', 'float translate = fract(time*0.13);', 'st.y -= translate*5.1980;', 'float line = float(sin(st.y/0.0915));',
    /*'float alpha = sin(clr.y/0.8)/0.1+3.0;',*/
    'gl_FragColor = vec4( 0.3 - dark*2.0, 0.6 + line*0.2 - dark*2.0, 1.1 + line*0.4 - dark*2.0, 1.0 );', '}'].join("\n")

    /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  };var spaceShader = {
    uniforms: {
      'iGlobalTime': { type: "f", value: 1.0 },
      'iResolution': { type: "v2", value: new THREE.Vector2(window.innerWidth, window.innerHeight) },
      'tDiffuse': { value: null },
      'circleSize': { type: 'f', value: 0.0 }
    },
    vertexShader: ['varying vec2 vUv;', 'void main() {', 'vUv = uv;', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\n'),
    fragmentShader: ['varying vec2 vUv;', 'uniform float iGlobalTime;', 'uniform vec2 iResolution;', 'uniform sampler2D tDiffuse;', 'uniform float circleSize;',

    //CBS
    //Parallax scrolling fractal galaxy.
    //Inspired by JoshP's Simplicity shader: https://www.shadertoy.com/view/lslGWr
    //http://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns/
    'float field(in vec3 p,float s) {', 'float strength = 7. + .03 * log(1.e-6 + fract(sin(iGlobalTime) * 4373.11));', 'float accum = s/4.;', 'float prev = 0.;', 'float tw = 0.;', 'for (int i = 0; i < 26; ++i) {', 'float mag = dot(p, p);', 'p = abs(p) / mag + vec3(-.5, -.4, -1.5);', 'float w = exp(-float(i) / 7.);', 'accum += w * exp(-strength * pow(abs(mag - prev), 2.2));', 'tw += w;', 'prev = mag;', '}', 'return max(0., 5. * accum / tw - .7);', '}',
    // Less iterations for second layer
    'float field2(in vec3 p, float s) {', 'float strength = 5. + .03 * log(1.e-6 + fract(sin(iGlobalTime) * 4373.11));',
    //float strength = 7. + .03 * log(1.e-6 + fract(sin(iGlobalTime) * 4373.11));
    'float accum = s/4.;', 'float prev = 0.;', 'float tw = 0.;', 'for (int i = 0; i < 18; ++i) {', 'float mag = dot(p, p);', 'p = abs(p) / mag + vec3(-.5, -.4, -1.5);', 'float w = exp(-float(i) / 7.);', 'accum += w * exp(-strength * pow(abs(mag - prev), 2.2));', 'tw += w;', 'prev = mag;', '}', 'return max(0., 5. * accum / tw - .7);', '}', 'vec3 nrand3( vec2 co ) {', 'vec3 a = fract( cos( co.x*8.3e-3 + co.y )*vec3(1.3e5, 4.7e5, 2.9e5) );', 'vec3 b = fract( sin( co.x*0.3e-3 + co.y )*vec3(8.1e5, 1.0e5, 0.1e5) );', 'vec3 c = mix(a, b, 0.5);', 'return c;', '}',

    // circle
    'float circle(in vec2 _st, in float _radius) {', 'vec2 dist = _st-vec2(0.5);', 'return 1.-smoothstep(_radius-(_radius*0.01),', '_radius+(_radius*0.01),', 'dot(dist,dist)*4.0);', '}', 'void mainImage( out vec4 fragColor1, in vec2 fragCoord ) {',
    //'vec2 uv = 2. * fragCoord.xy / iResolution.xy - 1.;',
    //'vec2 uv = vec2( vUv.x*( iResolution.x / iResolution.y ), vUv.y*( iResolution.y / iResolution.x ) );',
    'vec2 uv = vec2( vUv.x, vUv.y*( iResolution.y / iResolution.x ) );', 'vec2 uvs = uv * iResolution.xy / max(iResolution.x, iResolution.y);', 'vec3 p = vec3(uvs / 4., 0) + vec3(1., -1.3, 0.);', 'p += .2 * vec3(sin(iGlobalTime / 16.), sin(iGlobalTime / 12.),  sin(iGlobalTime / 128.));', 'float freqs[4];', //=float[4](0.2,0.5,0.1,0.7);	
    'freqs[0]=0.2;', 'freqs[1]=0.5;', 'freqs[2]=0.1;', 'freqs[3]=0.7;',
    //Sound
    /*
    freqs[0] = texture2D( iChannel0, vec2( 0.01, 0.25 ) ).x;
    freqs[1] = texture2D( iChannel0, vec2( 0.07, 0.25 ) ).x;
    freqs[2] = texture2D( iChannel0, vec2( 0.15, 0.25 ) ).x;
    freqs[3] = texture2D( iChannel0, vec2( 0.30, 0.25 ) ).x;
    */
    'float t = field(p,freqs[2]);', 'float v = (1. - exp((abs(uv.x) - 1.) * 6.)) * (1. - exp((abs(uv.y) - 1.) * 6.));',
    //Second Layer
    'vec3 p2 = vec3(uvs / (4.+sin(iGlobalTime*0.11)*0.2+0.2+sin(iGlobalTime*0.15)*0.3+0.4), 1.5) + vec3(2., -1.3, -1.);', 'p2 += 0.25 * vec3(sin(iGlobalTime / 16.), sin(iGlobalTime / 12.),  sin(iGlobalTime / 128.));', 'float t2 = field2(p2,freqs[3]);', 'vec4 c2 = mix(.4, 1., v) * vec4(1.3 * t2 * t2 * t2 ,1.8  * t2 * t2 , t2* freqs[0], t2);',
    //Let's add some stars
    //Thanks to http://glsl.heroku.com/e#6904.0
    'vec2 seed = p.xy * 2.0;', 'seed = floor(seed * iResolution.x);', 'vec3 rnd = nrand3( seed );', 'vec4 starcolor = vec4(pow(rnd.y,40.0));',
    //Second Layer
    'vec2 seed2 = p2.xy * 2.0;', 'seed2 = floor(seed2 * iResolution.x);', 'vec3 rnd2 = nrand3( seed2 );', 'starcolor += vec4(pow(rnd2.y,40.0));', 'vec4 fragColor = mix(freqs[3]-.3, 1., v) * vec4(1.5*freqs[2] * t * t* t , 1.2*freqs[1] * t * t, freqs[3]*t, 1.0)+c2+starcolor;',

    //circle mask
    'float mask = clamp( ', 'circle( vec2(uv.x-0.2, uv.y), circleSize ) +', 'circle( vec2(uv.x+0.2, uv.y), circleSize ), 0.0, 1.0 ', ');',
    //add mask to space  
    'vec4 spaceWithMask = vec4( fragColor * ( mask ) );',

    //back scene
    'vec4 scene = texture2D( tDiffuse, uv );',
    //add maskToBackScene
    'vec4 sceneWithMask = vec4( scene * ( 1.0 - mask ) );', 'fragColor1 = spaceWithMask + sceneWithMask;', '}', 'void main(void) {', 'mainImage(gl_FragColor,gl_FragCoord.xy);', '}'].join('\n')
  };

  /*%%  PARAMS  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var app_Params = {
    earthRed: 0.0,
    earthGreen: 0.04,
    earthBlue: 0.08,
    glowRed: 0.0,
    glowGreen: 0.19,
    glowBlue: 0.22,
    glowLight: 0.0,
    glowBorder: 2.9,
    wireColor: "#ffae23",
    wireDiodRed: 0.9,
    wireDiodGreen: 0.9,
    wireDiodBlue: 0.9,
    earthLeftMax: -2.0,
    earthRightMax: 0.45,
    earthAxell: 0.00085,
    earthMaxSpd: 0.017,
    earthSpdFree: 0.015

    /*%%  APP STATES  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
    /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  };var startAPP = function startAPP() {
    drawFrame();
  };

  var APP_STATE = 'DARK'; // || 'FLASH' || 'LIGHT'
  var BOTTOM_APP_STATE = 'NONE'; // || 'DELAYbeforeCIRCLES || 'CIRCLES' || 'FREESPACE' || 'TEXT'

  var onUserActionMouseWheel = function onUserActionMouseWheel() {
    return APP_STATE = 'FLASH';
  };

  var animateAllObjects = function animateAllObjects() {
    if (APP_STATE == 'FLASH') {
      if (checkEarthStateLight() && checkConnectorsStateLight()) APP_STATE = 'LIGHT';
    }
    animateEarth(APP_STATE);
    animateConnectors(APP_STATE);
    animateCubes(APP_STATE);
    /************************************/
    if (BOTTOM_APP_STATE == 'NONE') {
      if (checkVisible(canvasBottom)) {
        onBottomAnimationStart();
        startDelay();
        onCheckScrollToBottomCanvas();
        BOTTOM_APP_STATE = 'DELAYbeforeCIRCLES';
      }
    }
    if (BOTTOM_APP_STATE == 'CIRCLES') {
      updateCanvasBottomCircles();
      if (checkCirclesDone()) {
        BOTTOM_APP_STATE = 'FREESPACE';
      }
    }
    if (BOTTOM_APP_STATE == 'FREESPACE') {
      console.log(' !! ');
      onBottomAnimationDone();
      BOTTOM_APP_STATE = 'TEXT';
    }
  };

  var startDelay = function startDelay() {
    setTimeout(function () {
      BOTTOM_APP_STATE = 'CIRCLES';
    }, 1000);
  };

  var onBottomAnimationStart = function onBottomAnimationStart() {},
      onBottomAnimationDone = function onBottomAnimationDone() {},
      onCheckScrollToBottomCanvas = function onCheckScrollToBottomCanvas() {};

  var setOnBottomAnimationStart = function setOnBottomAnimationStart(f) {
    return onBottomAnimationStart = f;
  };
  var setOnBottomAnimationDone = function setOnBottomAnimationDone(f) {
    return onBottomAnimationDone = f;
  };
  var setScrolltoBottom = function setScrolltoBottom(f) {
    return onCheckScrollToBottomCanvas = f;
  };

  /*%%  LOAD ASSETS  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var textureLoader = void 0,
      objectLoader = void 0;

  var ASSETS = {
    textures: {
      glow: null,
      continents: null
    },
    geoms: {
      corpus: null,
      diod: null,
      globe: null
    }
  };

  var loadAssets = function loadAssets(onLoad) {
    textureLoader = new THREE.TextureLoader();
    objectLoader = new THREE.OBJLoader();
    new Promise(function (resolve) {
      ASSETS.textures.continents = textureLoader.load('assets/contour.jpg', function () {
        resolve();
      });
    }).then(function () {
      new Promise(function (resolve) {
        ASSETS.textures.glow = textureLoader.load('assets/glow.png', function () {
          resolve();
        });
      });
    }).then(function () {
      return new Promise(function (resolve) {
        objectLoader.load('assets/connector.obj', function (obj) {
          obj.traverse(function (child) {
            if (child instanceof THREE.Mesh != true) return;
            if (child.name == 'diod') ASSETS.geoms.diod = child.geometry;
            if (child.name == 'iron') ASSETS.geoms.corpus = child.geometry;
            if (ASSETS.geoms.diod && ASSETS.geoms.corpus) resolve();
          });
        });
      });
    }).then(function () {
      return new Promise(function (resolve) {
        objectLoader.load('assets/globe.obj', function (obj) {
          obj.traverse(function (child) {
            if (child instanceof THREE.Mesh != true) return;
            ASSETS.geoms.globe = child.geometry;
            resolve();
          });
        });
      });
    }).then(function () {
      textureLoader = null;
      objectLoader = null;
      onLoad();
    });
  };

  /*%%  INIT SCENE  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var canvasTop = void 0,
      canvasBottom = void 0;

  var initAPP = function initAPP() {
    var c1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      canvas: 'none..',
      w: window.innerWidth,
      h: window.innerHeight
    };
    var c2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      canvas: 'none..',
      w: window.innerWidth,
      h: window.innerHeight
    };

    canvasTop = c1.canvas;
    canvasBottom = c2.canvas;
    createScene();
    createRendererTop(c1);
    createRendererBottom(c2);
    createCubes();
    createEarth();
    createConnectors();
    resizeCanvas(c1, c2);
  };

  var scene = void 0,
      camera = void 0,
      renderer = void 0,
      cameraBottom = void 0,
      rendererBottom = void 0,
      composerBottom = void 0,
      passSpace = void 0,
      startTime = void 0;

  var createScene = function createScene() {
    var lightPoint = new THREE.PointLight(0xf114b5d, 0.3);
    lightPoint.position.set(500, 500, 600);
    var lightAmb = new THREE.AmbientLight(0x8a0873, 0.2);
    scene = new THREE.Scene();
    scene.add(lightPoint, lightAmb);
  };

  var createRendererTop = function createRendererTop(c1) {
    renderer = new THREE.WebGLRenderer({ canvas: c1.canvas });
    camera = new THREE.PerspectiveCamera(20, c1.w / c1.h, 3.5, 25000);
    camera.position.set(0, 0, 7200);
  };

  var createRendererBottom = function createRendererBottom(c2) {
    startTime = Date.now();
    rendererBottom = new THREE.WebGLRenderer({ canvas: c2.canvas });
    composerBottom = new THREE.EffectComposer(rendererBottom);
    cameraBottom = new THREE.PerspectiveCamera(40, c2.w / c2.h, 3.5, 15000);
    cameraBottom.position.set(0, 4000, 0);
    cameraBottom.rotation.x = -0.4;
    composerBottom.addPass(new THREE.RenderPass(scene, cameraBottom));
    passSpace = new THREE.ShaderPass(spaceShader);
    composerBottom.addPass(passSpace);
    passSpace.renderToScreen = true;
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var resizeCanvas = function resizeCanvas() {
    var size1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      w: window.innerWidth,
      h: window.innerHeight
    };
    var size2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      w: window.innerWidth,
      h: window.innerWidth
    };

    var asp = size1.h / size1.w - 0.5;
    if (asp < 1) {
      camera.position.x = -800 + (size1.h / size1.w - 0.5) * 800;
      camera.position.z = 7200;
      glowMesh.position.x = 65;
    } else {
      camera.position.x = 0;
      camera.position.z = 10000;
      glowMesh.position.x = 0;
    }
    renderer.setSize(size1.w, size1.h);
    camera.aspect = size1.w / size1.h;
    camera.updateProjectionMatrix();
    if (rendererBottom) rendererBottom.setSize(size2.w, size2.h);
    if (cameraBottom) {
      cameraBottom.aspect = size2.w / size2.h * size2.h / size2.w;
      cameraBottom.updateProjectionMatrix();
    }
    if (passSpace) passSpace.uniforms.iResolution.value = new THREE.Vector2(size2.w, size2.h);
    var size = rendererBottom.getDrawingBufferSize();
    if (composerBottom) composerBottom.setSize(size.width, size.height);
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var drawFrame = function drawFrame() {
    var onFocusTop = checkVisible(canvasTop);
    var onFocusBottom = checkVisible(canvasBottom);
    if (onFocusTop || onFocusBottom) animateAllObjects();
    if (onFocusTop) renderer.render(scene, camera);
    if (onFocusBottom && composerBottom && passSpace) {
      var currentTime = Date.now();
      passSpace.uniforms.iGlobalTime.value = (currentTime - startTime) * 0.001;
      composerBottom.render();
    }
    requestAnimationFrame(drawFrame);
  };

  var checkVisible = function checkVisible(elm) {
    var rect = elm.getBoundingClientRect();
    var viewHeight = Math.max(document.documentElement.clientHeight, window.innerHeight);
    return !(rect.bottom < 0 || rect.top - viewHeight >= 0);
  };

  var spdCircles = 0.001;
  var updateCanvasBottomCircles = function updateCanvasBottomCircles() {
    passSpace.uniforms.circleSize.value += spdCircles;
    spdCircles *= 1.01;
  };

  var checkCirclesDone = function checkCirclesDone() {
    if (passSpace.uniforms.circleSize.value > 1.0) return true;
    return false;
  };

  /*%%  EARTH  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var earth = void 0,
      continentsMesh = void 0,
      glowMesh = void 0;

  var createEarth = function createEarth() {
    glowMesh = createEarthGlow();
    glowMesh.position.set(65, 0, -610);
    continentsMesh = createContinents();
    earth = new THREE.Group();
    earth.rotation.z = -0.3;
    earth.rotation.x = 0.5;
    continentsMesh.rotation.y = 0.7;
    scene.add(earth.add(continentsMesh), glowMesh);
    glowMesh.lookAt(camera.position);
  };

  var createContinents = function createContinents() {
    var mesh = new THREE.Mesh(ASSETS.geoms.globe, new THREE.ShaderMaterial(continentsShader));
    mesh.material.transparent = true;
    mesh.material.side = THREE.DoubleSide;
    mesh.material.depthWrite = false;
    mesh.material.needsUpdate = true;
    mesh.material.uniforms.tDiffuse.value = ASSETS.textures.continents;
    return mesh;
  };

  var createEarthGlow = function createEarthGlow() {
    var geom = new THREE.PlaneGeometry(1900, 1900);
    setMapToGlowShader(ASSETS.textures.glow);
    var mat = new THREE.ShaderMaterial(glowShader);
    mat.transparent = true;
    var mesh = new THREE.Mesh(geom, mat);
    return mesh;
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var earthSpd = 0.002,
      addSpd = 0.0003,
      earthDir = 'left'; // || 'right'
  var clock = new THREE.Clock();

  var animateEarth = function animateEarth(STATE) {
    if (!earth) return;
    if (STATE == 'DARK') earthUpdateParamsDark();
    if (STATE == 'FLASH') earthUpdateParamsFlash();
    continentsMesh.rotation.y += earthSpd;
  };

  var earthUpdateParamsDark = function earthUpdateParamsDark() {
    if (continentsMesh.rotation.y > app_Params.earthLeftMax && earthDir == 'left') earthDir = 'right';
    if (continentsMesh.rotation.y < app_Params.earthRightMax && earthDir == 'right') earthDir = 'left';
    if (earthDir == 'left') if (Math.abs(earthSpd + app_Params.earthAxell) < app_Params.earthMaxSpd) earthSpd += app_Params.earthAxell;
    if (earthDir == 'right') if (Math.abs(earthSpd - app_Params.earthAxell) < app_Params.earthMaxSpd) earthSpd -= app_Params.earthAxell;
  };

  var earthUpdateParamsFlash = function earthUpdateParamsFlash() {
    earthSpd < app_Params.earthSpdFree ? earthSpd += addSpd : earthSpd = app_Params.earthSpdFree;
    if (continentsMesh.material.uniforms.light.value < 1.35) continentsMesh.material.uniforms.light.value += 0.012;
    if (glowShader.uniforms.light.value < 1.5) glowShader.uniforms.light.value += 0.12;
  };

  var checkEarthStateLight = function checkEarthStateLight() {
    if (earthSpd == app_Params.earthSpdFree) return true;
    return false;
  };

  /*%% CONNECTORS  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var arrConnectors = [],
      connectorsData = [{ //america
    length: -3000,
    dirY: 6.0,
    dirZ: 0.7
  }, { //soushAm
    length: -4500,
    dirY: 0.2,
    dirZ: 1.8
  }, { //russia
    length: -3500,
    dirY: 3.24,
    dirZ: 0.8
  }, { //europe
    length: -4500,
    dirY: 1.5,
    dirZ: 0.8
  }, { //africa
    length: -5000,
    dirY: 1.9,
    dirZ: 1.8
  }, { //australia
    length: -5500,
    dirY: 3.7,
    dirZ: 2.0
  }],
      connectorsCenter = void 0,
      materialIron = void 0,
      materialDiod = void 0;

  var createConnectors = function createConnectors() {
    materialIron = createMaterialIron();
    materialDiod = createMaterialDiod();
    connectorsCenter = new THREE.Group();
    connectorsData.forEach(function (item) {
      var objPlug = createPlug();
      var wire = createWire(item.length);
      objPlug.plug.add(wire);
      var connector = new THREE.Group();
      connector.add(objPlug.plug);
      connector.position.set(Math.sin(item.dirZ) * Math.sin(item.dirY) * 890, Math.cos(item.dirZ) * 890, Math.sin(item.dirZ) * Math.cos(item.dirY) * 890);
      connector.lookAt(0, 0, 0);
      arrConnectors.push({
        connector: connector,
        plug: objPlug.plug,
        corpus: objPlug.corpus,
        diod: objPlug.diod,
        wire: wire,
        length: item.length
      });
      connectorsCenter.add(connector);
    });
    continentsMesh.add(connectorsCenter);
  };

  var createMaterialIron = function createMaterialIron() {
    return new THREE.MeshPhongMaterial({
      color: 0x0c0a19,
      emissive: 0x00000,
      specular: 0xffffff,
      shininess: 300
    });
  };

  var createMaterialDiod = function createMaterialDiod() {
    return new THREE.ShaderMaterial(diodShader);
  };

  var createPlug = function createPlug() {
    var corpus = new THREE.Mesh(ASSETS.geoms.corpus, materialIron);
    var diod = new THREE.Mesh(ASSETS.geoms.diod, materialDiod);
    var plug = new THREE.Group();
    plug.add(diod, corpus);
    return { plug: plug, corpus: corpus, diod: diod };
  };

  var createWire = function createWire(length) {
    var curveQuad = new THREE.QuadraticBezierCurve3(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, -1000), new THREE.Vector3(0, 0, length));
    var wireGeom = new THREE.TubeBufferGeometry(curveQuad, 10, 25, 8, false);
    return new THREE.Mesh(wireGeom, materialIron);
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var removeConnectorsFromScene = function removeConnectorsFromScene() {
    if (arrConnectors.length == 0) return;
    for (var i = 0; i < arrConnectors.length; i++) {
      arrConnectors[i].plug.remove(arrConnectors[i].corpus);
      arrConnectors[i].plug.remove(arrConnectors[i].diod);
      connectorsCenter.remove(arrConnectors[i].plug);
      connectorsCenter.remove(arrConnectors[i].wire);
      var md = arrConnectors[i];
      arrConnectors.splice(i, 1);
      i--;
      md = null;
    }
    scene.remove(connectorsCenter);
    arrConnectors = [];
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var spdConnectors = 0.005,
      oldSTATE = 'DARK';

  var animateConnectors = function animateConnectors(STATE) {
    if (arrConnectors.length == 0) return;
    if (STATE == 'DARK') animationConnectorsDark();
    if (STATE == 'FLASH') {
      if (oldSTATE == 'DARK') {
        getConnectorsFromEarthAndPutInScene();
        oldSTATE = 'FLASH';
      }
      animationConnectorsFlash();
    }
  };

  var animationConnectorsDark = function animationConnectorsDark() {
    var time = clock.getDelta();
    materialDiod.uniforms.time.value += time;
    arrConnectors.forEach(function (item) {
      if (!item.plug || !item.wire) return;
      if (item.length == -3000) {
        item.wire.geometry.parameters.path.v2.y = -4000 * Math.sin(continentsMesh.rotation.y - 0.4);
      } else {
        item.wire.geometry.parameters.path.v2.x = 5000 * Math.sin(continentsMesh.rotation.y - 0.4);
      }
      item.wire.geometry.parameters.path.v2.x = 5000 * Math.sin(continentsMesh.rotation.y - 0.4);
      item.wire.geometry.dispose();
      item.wire.geometry = new THREE.TubeBufferGeometry(item.wire.geometry.parameters.path, 30, 25, 8, false);
      item.wire.geometry.needsUpdate = true;
    });
  };

  var getConnectorsFromEarthAndPutInScene = function getConnectorsFromEarthAndPutInScene() {
    continentsMesh.getWorldQuaternion(connectorsCenter.quaternion);
    continentsMesh.remove(connectorsCenter);
    scene.add(connectorsCenter);
  };

  var animationConnectorsFlash = function animationConnectorsFlash() {
    materialDiod.uniforms.dark.value += 0.01;
    spdConnectors += 0.6;
    arrConnectors.forEach(function (item) {
      item.plug.position.z -= spdConnectors;
    });
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var checkConnectorsStateLight = function checkConnectorsStateLight() {
    if (arrConnectors.length == 0) return true;
    if (!arrConnectors[0].plug) return true;
    if (arrConnectors[0].plug.position.z < -15000) {
      removeConnectorsFromScene();
      return true;
    }
    return false;
  };

  /*%% BACKGROUND CUBES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var arrCubes = [];

  var createCubes = function createCubes() {
    var cubesGroup = new THREE.Group();
    scene.add(cubesGroup);
    cubesGroup.rotation.x = -1;
    cubesGroup.position.set(0, 0, -9000);
    var mat = new THREE.MeshPhongMaterial({
      color: 0x1ee5ba,
      emissive: 0x00000,
      specular: 0xc0c0c0,
      shininess: 100
    });
    var geom = new THREE.CubeGeometry(1000, 1000, 1000);
    for (var yi = 0; yi < 20; yi++) {
      for (var xi = 0; xi < 20; xi++) {
        var cube = new THREE.Mesh(geom, mat);
        cubesGroup.add(cube);
        cube.position.set(xi * 1000 - 10000, yi * 1000 - 5000, 0);
        cube.rotation.x = xi / 5.0 + yi / 5.0;
        arrCubes.push(cube);
      }
    }
  };

  var animateCubes = function animateCubes(STATE) {
    arrCubes.forEach(function (item) {
      item.rotation.x += 0.01;
    });
  };

  var CANVASES = {
    /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
    'canvas-dr01': {
      canvas: null,
      ctx: null,
      sprites_types: [{ type: 'LinesVert', count: 5 }, { type: 'LinesHor', count: 2 }],
      sprites: [],
      imgs: {
        'back': {
          src: 'assets/ill_01_back.png',
          data: null
        }
      }
    },
    /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
    'canvas-dr02': {
      canvas: null,
      ctx: null,
      sprites_types: [{ type: 'LeftYellowSlow', count: 70 }, { type: 'RightWhite', count: 10 }],
      sprites: [],
      imgs: {
        'back': {
          src: 'assets/ill_02_back.png',
          data: null
        }
      }
    },
    /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
    'canvas-dr03': {
      canvas: null,
      ctx: null,
      sprites_types: [{ type: 'LeftYellow', count: 70 }, { type: 'RightYellow', count: 70 }],
      sprites: [],
      imgs: {
        'back': {
          src: 'assets/ill_03_back.png',
          data: null
        }
      }
    },
    /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
    'canvas-dr04': {
      canvas: null,
      ctx: null,
      sprites: [],
      sprites_types: [{ type: 'LeftYellow', count: 50 }, { type: 'LeftMagenta', count: 50 }, { type: 'LeftGreen', count: 50 }, { type: 'RightYellow', count: 50 }, { type: 'RightMagenta', count: 50 }, { type: 'RightGreen', count: 50 }],
      imgs: {
        'back': {
          src: 'assets/ill_04_back.png',
          data: null
        },
        'wire': {
          src: 'assets/ill_04_wire.png',
          data: null,
          x: 0,
          y: 0,
          x2: 500,
          y2: 400
        }
      }
    },
    /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
    'canvas-dr05': {
      canvas: null,
      ctx: null,
      sprites: [],
      sprites_types: [{ type: 'LeftSuperTop', count: 70 }, { type: 'LeftSuperBottom', count: 50 }, { type: 'RightSuperTop', count: 50 }, { type: 'RightSuperBottom', count: 50 }],
      imgs: {
        'back': {
          src: 'assets/ill_05_back.png',
          data: null
        }
      }
    }
  };

  var sprites_TYPES = {
    /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
    'LeftYellowSlow': {
      conus: 1,
      spd: 0.6,
      start: {
        xMin: -20,
        xMax: -10,
        yMin: 80,
        yMax: 300
      },
      finish: {
        xMin: 160,
        xMax: 280,
        yMin: 80,
        yMax: 300
      },
      form: 'rect',
      color: '#ff0'
    },
    'RightWhite': {
      conus: 1,
      spd: 0.6,
      start: {
        xMin: 310,
        xMax: 320,
        yMin: 185,
        yMax: 187
      },
      finish: {
        xMin: 500,
        xMax: 510,
        yMin: 110,
        yMax: 230
      },
      form: 'circle',
      color: '#fff'
    },
    /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
    'LeftYellow': {
      conus: 1,
      spd: 1,
      start: {
        xMin: -20,
        xMax: -10,
        yMin: 80,
        yMax: 300
      },
      finish: {
        xMin: 160,
        xMax: 280,
        yMin: 150,
        yMax: 205
      },
      form: 'rect',
      color: '#ff0'
    },
    'LeftMagenta': {
      conus: 1,
      spd: 1,
      start: {
        xMin: -20,
        xMax: -10,
        yMin: 80,
        yMax: 300
      },
      finish: {
        xMin: 160,
        xMax: 280,
        yMin: 130,
        yMax: 235
      },
      form: 'rect',
      color: '#f0f'
    },
    'LeftGreen': {
      conus: 1,
      spd: 1,
      start: {
        xMin: -20,
        xMax: -10,
        yMin: 80,
        yMax: 300
      },
      finish: {
        xMin: 160,
        xMax: 280,
        yMin: 130,
        yMax: 235
      },
      form: 'rect',
      color: '#0f0'
    },
    'RightYellow': {
      conus: 1,
      spd: 1,
      start: {
        xMin: 320,
        xMax: 330,
        yMin: 150,
        yMax: 205
      },
      finish: {
        xMin: 500,
        xMax: 510,
        yMin: 80,
        yMax: 300
      },
      form: 'rect',
      color: '#ff0'
    },
    'RightMagenta': {
      conus: 1,
      spd: 1,
      start: {
        xMin: 320,
        xMax: 330,
        yMin: 130,
        yMax: 235
      },
      finish: {
        xMin: 500,
        xMax: 510,
        yMin: 80,
        yMax: 300
      },
      form: 'rect',
      color: '#f0f'
    },
    'RightGreen': {
      conus: 1,
      spd: 1,
      start: {
        xMin: 320,
        xMax: 330,
        yMin: 130,
        yMax: 235
      },
      finish: {
        xMin: 500,
        xMax: 510,
        yMin: 80,
        yMax: 300
      },
      form: 'rect',
      color: '#0f0'
    },
    /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
    'RightSuperTop': {
      conus: 1,
      spd: 1,
      start: {
        xMin: 325,
        xMax: 330,
        yMin: 120,
        yMax: 170
      },
      finish: {
        xMin: 500,
        xMax: 510,
        yMin: 80,
        yMax: 150
      },
      form: 'rect',
      color: '#0ff'
    },
    'RightSuperBottom': {
      conus: 1,
      spd: 1,
      start: {
        xMin: 325,
        xMax: 330,
        yMin: 240,
        yMax: 270
      },
      finish: {
        xMin: 500,
        xMax: 510,
        yMin: 220,
        yMax: 310
      },
      form: 'rect',
      color: '#0ff'
    },
    'LeftSuperTop': {
      conus: 1,
      spd: 1,
      start: {
        xMin: -20,
        xMax: -10,
        yMin: 80,
        yMax: 150
      },
      finish: {
        xMin: 140,
        xMax: 160,
        yMin: 120,
        yMax: 170
      },
      form: 'rect',
      color: '#0ff'
    },
    'LeftSuperBottom': {
      conus: 1,
      spd: 1,
      start: {
        xMin: -20,
        xMax: -10,
        yMin: 220,
        yMax: 310
      },
      finish: {
        xMin: 140,
        xMax: 160,
        yMin: 240,
        yMax: 270
      },
      form: 'rect',
      color: '#0ff'
    },
    /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
    'LinesVert': {
      conus: 0,
      spd: 0.2,
      start: {
        xMin: -200,
        xMax: -30,
        yMin: 0,
        yMax: 0
      },
      finish: {
        xMin: 600,
        xMax: 600,
        yMin: 0,
        yMax: 0
      },
      color: null,
      img: 'lineVert-img'
    },
    'LinesHor': {
      conus: 0,
      spd: 0.1,
      start: {
        xMin: 0,
        xMax: 0,
        yMin: 800,
        yMax: 900
      },
      finish: {
        xMin: 0,
        xMax: 0,
        yMin: -40,
        yMax: -60
      },
      color: null,
      img: 'lineHor-img'
    }
  };

  var sprites_Imgs = {
    'lineHor-img': {
      src: 'assets/sprite_line_hor.png',
      data: null
    },
    'lineVert-img': {
      src: 'assets/sprite_line_vert.png',
      data: null
    }
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var actionsLoad = [],
      loaded = 0;

  var InitStart = function InitStart(onStart) {
    loadAssetsImgs(function () {
      initCanvases(CANVASES);
      startAnimationCanvases();
      onStart();
    });
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var loadAssetsImgs = function loadAssetsImgs(onloadAll) {
    for (var key in CANVASES) {
      for (var keyNameImg in CANVASES[key].imgs) {
        actionsLoad.push(createActionLoadImg(CANVASES[key].imgs[keyNameImg]));
      }
    }
    for (var img in sprites_Imgs) {
      actionsLoad.push(createActionLoadImg(sprites_Imgs[img]));
    }
    actionsLoad.push(onloadAll);
    actionsLoad[0]();
  };

  var createActionLoadImg = function createActionLoadImg(img) {
    var action = function action() {
      img.data = new Image();
      img.data.src = img.src;
      img.data.onload = function () {
        return actionsLoad[loaded++]();
      };
    };
    return action;
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var initCanvases = function initCanvases(canvases) {
    for (var key in canvases) {
      canvases[key].canvas = document.getElementById(key);
      canvases[key].ctx = canvases[key].canvas.getContext('2d');
      initSprites(canvases[key]);
    }
  };

  var initSprites = function initSprites(canvas) {
    canvas.sprites_types.forEach(function (item) {
      canvas.sprites.push(createDataSprites(item.type, item.count));
    });
  };

  var createDataSprites = function createDataSprites(sprite_type, count) {
    var arr = [];
    for (var i = 0; i < count; i++) {
      var newSprite = {};
      setStartParamsSprite(newSprite, sprite_type);
      arr.push(newSprite);
    }
    return arr;
  };

  var setStartParamsSprite = function setStartParamsSprite(s, type) {
    var _pro = sprites_TYPES[type];
    var time = Math.random() * 30 + 30;
    s.type = type;
    s.x = Math.random() * (_pro.start.xMax - _pro.start.xMin) + _pro.start.xMin;
    s.y = Math.random() * (_pro.start.yMax - _pro.start.yMin) + _pro.start.yMin;
    s.spdX = (_pro.finish.xMin - s.x) / time * _pro.spd;
    s.spdY = (_pro.finish.yMin - s.y + Math.random() * (_pro.finish.yMax - _pro.finish.yMin) * _pro.conus) / time * _pro.spd;
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var interval = void 0;

  var startAnimationCanvases = function startAnimationCanvases() {
    interval = setInterval(drawFrameCanvases, 30);
  };

  var drawFrameCanvases = function drawFrameCanvases() {
    for (var key in CANVASES) {
      if (checkVisible$1(CANVASES[key].canvas)) updateCanvas(CANVASES[key]);
    }
  };

  var checkVisible$1 = function checkVisible(elm) {
    var rect = elm.getBoundingClientRect();
    var viewHeight = Math.max(document.documentElement.clientHeight, window.innerHeight);
    return !(rect.bottom < 0 || rect.top - viewHeight >= 0);
  };

  var updateCanvas = function updateCanvas(item) {
    item.ctx.clearRect(0, 0, item.canvas.width, item.canvas.height);
    item.ctx.globalCompositeOperation = 'source-over';
    item.ctx.drawImage(item.imgs['back'].data, 0, 0, item.canvas.width, item.canvas.height);
    updateSprites(item);
    if (item.imgs['wire']) item.ctx.drawImage(item.imgs['wire'].data, item.imgs['wire'].x, item.imgs['wire'].y, item.imgs['wire'].x2, item.imgs['wire'].y2);
    item.ctx.globalCompositeOperation = 'destination-in';
    item.ctx.drawImage(item.imgs['back'].data, 0, 0, item.canvas.width, item.canvas.height);
  };

  var updateSprites = function updateSprites(can) {
    for (var i = 0; i < can.sprites.length; i++) {
      for (var ii = 0; ii < can.sprites[i].length; ii++) {
        drawSprite(can.ctx, can.sprites[i][ii]);
      }
    }
  };

  var drawSprite = function drawSprite(ctx, sprite) {
    var _pro = sprites_TYPES[sprite.type];
    if (sprite.x > _pro.finish.xMin) setStartParamsSprite(sprite, sprite.type);
    /* exeption .. :( ******/
    if (sprite.type == 'LinesHor' && sprite.y < _pro.finish.yMin) setStartParamsSprite(sprite, sprite.type);
    /***********************/
    sprite.x += sprite.spdX;
    sprite.y += sprite.spdY;
    if (_pro.img) {
      ctx.drawImage(sprites_Imgs[_pro.img].data, sprite.x, sprite.y);
      return;
    }
    if (_pro.form == 'rect') {
      ctx.fillStyle = sprites_TYPES[sprite.type].color;
      ctx.fillRect(sprite.x, sprite.y, 7, 7);
      return;
    }
    if (_pro.form == 'circle') {
      ctx.fillStyle = sprites_TYPES[sprite.type].color;
      ctx.beginPath();
      ctx.arc(sprite.x, sprite.y, 4, 0, 2 * Math.PI);
      ctx.fill();
      return;
    }
  };

  window.onload = function () {
    initBottomHTML();
    InitStart(function () {
      loadAssets(function () {
        initAPP({
          canvas: document.getElementById('webgl'),
          w: window.innerWidth,
          h: window.innerHeight
        }, {
          canvas: document.getElementById('webgl-bottom'),
          w: window.innerWidth,
          h: window.innerHeight
        });
        startAPP();
        showElement(document.getElementById('webgl'));
        hideElement(document.getElementById('preloader'));
        setMouseWeel(onUserActionMouseWheel);
        setScrolltoBottom(checkScrolledToBottomCanvas);
        setOnBottomAnimationStart(fixScroll);
        setOnBottomAnimationDone(showBottomBlock);
        setWindowResize(resizeCanvas);
      });
    });
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var onResize = void 0;

  var setWindowResize = function setWindowResize(f) {
    onResize = f;
    window.addEventListener('resize', function () {
      onResize({ w: window.innerWidth, h: window.innerHeight }, { w: window.innerWidth, h: window.innerHeight });
    }, false);
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var actionMouseWheel = void 0;

  var setMouseWeel = function setMouseWeel(f) {
    actionMouseWheel = f;
    document.addEventListener('wheel', onMouseWheel, false);
    document.addEventListener('scroll', onMouseWheel, false);
    document.addEventListener('touchstart', onMouseWheel, false);
  };

  var removeListenerMouseWheel = function removeListenerMouseWheel() {
    document.removeEventListener('wheel', onMouseWheel, false);
    document.removeEventListener('scroll', onMouseWheel, false);
    document.removeEventListener('touchstart', onMouseWheel, false);
  };

  var onMouseWheel = function onMouseWheel() {
    actionMouseWheel();
    removeListenerMouseWheel();
    setTimeout(function () {
      var slogan = document.getElementById('slogan');
      slogan.className = 'show';
    }, 500);
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var bottomCanvas = void 0,
      bottomCanvasPositionY = void 0;

  var initBottomHTML = function initBottomHTML() {
    bottomCanvas = document.getElementById('webgl-bottom');
    bottomCanvasPositionY = bottomCanvas.offsetTop;
  };

  var showBottomBlock = function showBottomBlock() {
    var bottomBlock = document.getElementById('bottom-scheme');
    bottomBlock.className = 'show';
    console.log('show');
    unfixScroll();
  };

  var checkScrolledToBottomCanvas = function checkScrolledToBottomCanvas() {
    var posY = window.pageYOffset;
    if (posY > bottomCanvasPositionY + window.innerHeight) {
      fixScroll();
    }
  };

  var fixScroll = function fixScroll() {
    var posY = window.pageYOffset;
    document.body.style.position = 'fixed';
    document.body.style.top = -posY - window.innerHeight + 'px';
  };

  var unfixScroll = function unfixScroll() {
    document.body.style.position = 'static';
    window.scrollTo(0, bottomCanvasPositionY);
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var showElement = function showElement(elem) {
    return elem.className = 'show';
  };

  var hideElement = function hideElement(elem) {
    elem.className = 'hide';
    setTimeout(function () {
      elem.className = 'hidden';
    }, 1000);
  };

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
